clc;
close all;
clear;

mDir = fileparts(mfilename('fullpath'));
cd(mDir);
addpath(genpath('../'));

%% Params:

exp = 'ALL_4_SEGS_Q0'; % 'JUST_LAB_SEG', 'ALL_4_SEGS', 'ALL_4_SEGS_Q0'
calcInLog=false; %false (for linear vus), true (for logarithmic vus)

originalVOCDirectory='/scratch_net/troubadour/smanenfr/datasets/VOC2007/Raw/VOCdevkit_test'; %Change thisbackups/rpg/info/rpg.mat
imgListDir= [originalVOCDirectory '/VOC2007/ImageSets/Layout/complete_test_set.txt']; %Change this
parsedVOCDir = '/scratch/smanenfr/temp/VOC2007/test';

%VOC params:

params.includeBoxesWithClasses={'aeroplane', 'bicycle','boat','bottle','bus','chair','diningtable','horse','motorbike','person','pottedplant','sofa','train','tvmonitor'};
params.omitImagesWithClasses={'bird','car','cat','cow','dog','sheep'};
params.considerDifficult=true;

nMaximumWindows = 10000;
evalParams.nWindows = unique(round(logspace(0, log10(nMaximumWindows), 100)));
evalParams.ious = 0 : 0.05 : 1;

if(strcmp(exp, 'ALL_4_SEGS'))
  configFile = '../config/rp_4segs.mat'; 
  proposalsDir = [mDir '/tmp_prop_dir'];
elseif(strcmp(exp, 'JUST_LAB_SEG'))
  configFile = '../config/rp.mat';
  proposalsDir = [mDir '/tmp_prop_dir_lab'];
elseif(strcmp(exp, 'ALL_4_SEGS_Q0'))
  configFile = '../config/rp_4segs_q0.mat';
  proposalsDir = [mDir '/tmp_prop_dir_q0'];
else
  assert(false);
end
resultDirs={proposalsDir};


%% Adapt VOC2007 data:

AdaptVOC2007Data(originalVOCDirectory,imgListDir,parsedVOCDir,params);

%% Compute proposals and individual detection rates:

ComputeProposals(parsedVOCDir, proposalsDir, configFile, evalParams);

%% Aggregate detection rates:

AggregateDRs(proposalsDir, parsedVOCDir, evalParams);

%% Compute Volume Under Surface:

nWindowsRange=[0 10000];
iouRange=[0.5 1];

nResults=numel(resultDirs);
drs=[];
for k=1:nResults
  data=load([resultDirs{k} '/aggregated_drs/drs.mat']);
  
  [cropped,legendStr]=CropEvaluations({data}, nWindowsRange, iouRange,{''});
  
  data=cropped{1};
  
  if(exist('ious','var'))
    assert( all(ious==data.ious));
  else
    ious=data.ious;
    nIous=length(ious);
  end
  
  if(exist('nWindows','var'))
    assert(all(nWindows==data.nWindows));
  else
    nWindows=data.nWindows;
    nnWindows=length(nWindows);
  end
  
  assert( ~exist('iNWindows','var') && ~exist('iIous','var'));
  
  drs=cat(3,drs,data.drs);
end

if(calcInLog)
  nWindows=log10(nWindows);
end

maxDrs=max(drs,[],3);
volumes=[];
maxVolume=trapz(ious, trapz(nWindows, maxDrs));
for k=1:nResults
  assert(all(all(maxDrs>=drs(:,:,k))));
  volumes=[ volumes, trapz(ious, trapz(nWindows, drs(:,:,k)))];
end

%Worse point computation
worsePoint=[];
for k=1:nResults
  worsePoint=[worsePoint, -max(max(maxDrs-drs(:,:,k)))];
end

perVolumes = volumes./((nWindows(end)-nWindows(1))*(ious(end)-ious(1)));

assert(all(perVolumes)>=0 && all(perVolumes)<=1);

volumeRatios=volumes/maxVolume;
[~, ids]=sort(volumeRatios,'descend');

volumeRatios=volumeRatios(ids);
worsePoint=worsePoint(ids);
perVolumes=perVolumes(ids);
assert(issorted(flipdim(perVolumes,2)));
for k=1:nResults
  fName=resultDirs{ids(k)};
  if(fName(end)=='/')
    fName=fName(1:(end-1));
  end
  [~,name,~]=fileparts(fName);
  disp([ 'Volume Under Surface (VUS):' num2str(perVolumes(k))]);
end

%% Display DR curve:

%%%nWindows%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% 
% selNWindows = 1072;%509, 1072
% 
% plot(data.ious, data.drs(find(data.nWindows==selNWindows), :), 'LineWidth', 3);
% 
% xlim([0.5, 1]);
% ylim([0, 1]);
% 
% axis square;

%%%IOU%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


pdr = [1, 0.0488879563575325;
2, 0.0838229122954259;
3, 0.1105749055812;
4, 0.130507763323542;
5, 0.150860260176248;
6, 0.166386907259757;
7, 0.179815358791439;
8, 0.194083088543852;
9, 0.204259336970206;
10, 0.215065044062107;
11, 0.226605119597146;
12, 0.234368443138901;
14, 0.25167855644146;
15, 0.260281158203945;
16, 0.2693033990767949;
18, 0.283885858161981 ;
20, 0.297314309693663;
22, 0.30853965589593 ;
24, 0.321338648762065;
26, 0.332983634074696;
28, 0.343159882501049;
31, 0.356378514477549;
34, 0.3702266051195977;
38, 0.3872219890893836;
41, 0.3965589592950061;
45, 0.411351237935376;
50, 0.4268778850188845;
55, 0.4413554343264794;
60, 0.4550986151909361;
66, 0.4695761644985313;
72, 0.482584976919849;
79, 0.4953839697859845;
87, 0.5110155266470836;
95, 0.5261225346202279;
105, 0.5422786403692892;
115, 0.5589592950062975;
126, 0.5758497691984839;
138, 0.5926353336130963;
152, 0.6091061686949262;
167, 0.6230591691145641;
183, 0.6398447335291695;
201, 0.6549517415023068;
221, 0.6697440201426717;
242, 0.6849559378934192;
266, 0.6997482165337841;
292, 0.7124422996223235;
320, 0.7276542173730579;
351, 0.7406630297943787;
385, 0.7535669324381093;
423, 0.7658413764162882;
464, 0.7794796475031497;
509, 0.791124632815778;
559, 0.803084347461183;
614, 0.812945866554763;
673, 0.822492656315569;
739, 0.831619806966009;
811, 0.842320604280319;
890, 0.849979018044482;
977, 0.856903063365506;
1072, 0.866764582459085;
1177, 0.873583718002518;
1292, 0.882081409987411;
1417, 0.887326898866974;
1556, 0.893831305077633;
1707, 0.899916072177927;
1874, 0.904007553503987;
2057, 0.908833403273185;
2257, 0.912295425933697;
2477, 0.915337809483844;
2719, 0.919534200587495;
2984, 0.922891313470415;
3275, 0.925514057910197;
3594, 0.927612253462023;
3944, 0.930759546789761;
4329, 0.932962652119178;
4751, 0.934746118338229;
5214, 0.936319765002098;
5722, 0.938522870331515;
6280, 0.939257238774654;
6893, 0.940201426772975;
7565, 0.941355434326479;
8302, 0.942194712547209;
9112, 0.943138900545531;
10000, 0.944922366764582];

selIou = 0.5;

semilogx(data.nWindows, data.drs(:, find(data.ious==selIou)), 'LineWidth', 3, 'Color', 'r');
hold on;
semilogx(pdr(:, 1), pdr(:, 2), 'LineWidth', 3, 'Color', 'b');

ylim([0, 1]);

axis square;























